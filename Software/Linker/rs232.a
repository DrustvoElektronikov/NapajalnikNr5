;/*****************************************************
;This program was produced by the
;CodeWizardAVR V2.03.9 Standard
;Automatic Program Generator
;© Copyright 1998-2008 Pavel Haiduc, HP InfoTech s.r.l.
;http://www.hpinfotech.com
;
;Project :
;Version :
;Date    : 6.9.2009
;Author  : Mirko Naglic
;Company : ELEKTRONIKA NAGLIC IN DRUGI
;Comments:
;
;
;Chip type               : ATmega16
;Program type            : Application
;AVR Core Clock frequency: 16,000000 MHz
;Memory model            : Small
;External RAM size       : 0
;Data Stack size         : 256
;*****************************************************/
;
;#include <mega16.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x40
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0xB0
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x20
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x30
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0xA0
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0xB0
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x10
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;#include <delay.h>
;
;#define RXB8 1
;#define TXB8 0
;#define UPE 2
;#define OVR 3
;#define FE 4
;#define UDRE 5
;#define RXC 7
;
;#define FRAMING_ERROR (1<<FE)
;#define PARITY_ERROR (1<<UPE)
;#define DATA_OVERRUN (1<<OVR)
;#define DATA_REGISTER_EMPTY (1<<UDRE)
;#define RX_COMPLETE (1<<RXC)
;
;// USART Receiver buffer
;#define RX_BUFFER_SIZE 8
;char rx_buffer[RX_BUFFER_SIZE];
;
;#if RX_BUFFER_SIZE<256
;unsigned char rx_wr_index,rx_rd_index,rx_counter;
;#else
;unsigned int rx_wr_index,rx_rd_index,rx_counter;
;#endif
;
;// This flag is set on USART Receiver buffer overflow
;bit rx_buffer_overflow;
;
;// USART Receiver interrupt service routine
;interrupt [USART_RXC] void usart_rx_isr(void)
; 0000 0038 {

	.CSEG
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
; 0000 0039 char status,data;
; 0000 003A status=UCSRA;
;PCODE: $0000000F VOL: 0
;PCODE: $00000010 VOL: 0
;	status -> R17
;	data -> R16
;PCODE: $00000011 VOL: 0
;PCODE: $00000012 VOL: 0
; 0000 003B data=UDR;
;PCODE: $00000013 VOL: 0
;PCODE: $00000014 VOL: 0
; 0000 003C if ((status & (FRAMING_ERROR | PARITY_ERROR | DATA_OVERRUN))==0)
;PCODE: $00000015 VOL: 0
;PCODE: $00000016 VOL: 0
;PCODE: $00000017 VOL: 0
; 0000 003D    {
; 0000 003E    rx_buffer[rx_wr_index]=data;
;PCODE: $00000018 VOL: 0
;PCODE: $00000019 VOL: 0
;PCODE: $0000001A VOL: 0
;PCODE: $0000001B VOL: 0
; 0000 003F    if (++rx_wr_index == RX_BUFFER_SIZE) rx_wr_index=0;
;PCODE: $0000001C VOL: 0
;PCODE: $0000001D VOL: 0
;PCODE: $0000001E VOL: 0
;PCODE: $0000001F VOL: 0
;PCODE: $00000020 VOL: 0
; 0000 0040    if (++rx_counter == RX_BUFFER_SIZE)
;PCODE: $00000021 VOL: 0
;PCODE: $00000022 VOL: 0
;PCODE: $00000023 VOL: 0
;PCODE: $00000024 VOL: 0
;PCODE: $00000025 VOL: 0
; 0000 0041       {
; 0000 0042       rx_counter=0;
;PCODE: $00000026 VOL: 0
; 0000 0043       rx_buffer_overflow=1;
;PCODE: $00000027 VOL: 0
;PCODE: $00000028 VOL: 0
;PCODE: $00000029 VOL: 0
; 0000 0044       };
;PCODE: $0000002A VOL: 0
; 0000 0045    };
;PCODE: $0000002B VOL: 0
; 0000 0046 }
;PCODE: $0000002C VOL: 0
;PCODE: $0000002D VOL: 0
;PCODE: $0000002E VOL: 0
;PCODE: $0000002F VOL: 0
;
;#ifndef _DEBUG_TERMINAL_IO_
;// Get a character from the USART Receiver buffer
;#define _ALTERNATE_GETCHAR_
;#pragma used+
;char getchar(void)
; 0000 004D {
;PCODE: $00000030 VOL: 0
;PCODE: $00000031 VOL: 0
; 0000 004E char data;
; 0000 004F while (rx_counter==0);
;PCODE: $00000032 VOL: 0
;	data -> R17
;PCODE: $00000033 VOL: 0
;PCODE: $00000034 VOL: 0
;PCODE: $00000035 VOL: 0
;PCODE: $00000036 VOL: 0
;PCODE: $00000037 VOL: 0
; 0000 0050 data=rx_buffer[rx_rd_index];
;PCODE: $00000038 VOL: 0
;PCODE: $00000039 VOL: 0
;PCODE: $0000003A VOL: 0
;PCODE: $0000003B VOL: 0
; 0000 0051 if (++rx_rd_index == RX_BUFFER_SIZE) rx_rd_index=0;
;PCODE: $0000003C VOL: 0
;PCODE: $0000003D VOL: 0
;PCODE: $0000003E VOL: 0
;PCODE: $0000003F VOL: 0
;PCODE: $00000040 VOL: 0
; 0000 0052 #asm("cli")
;PCODE: $00000041 VOL: 0
;PCODE: $00000042 VOL: 0
	cli
;PCODE: $00000043 VOL: 0
; 0000 0053 --rx_counter;
;PCODE: $00000044 VOL: 0
; 0000 0054 #asm("sei")
;PCODE: $00000045 VOL: 0
	sei
;PCODE: $00000046 VOL: 0
; 0000 0055 return data;
;PCODE: $00000047 VOL: 0
;PCODE: $00000048 VOL: 0
;PCODE: $00000049 VOL: 0
; 0000 0056 }
;PCODE: $0000004A VOL: 0
;#pragma used-
;#endif
;
;// USART Transmitter buffer
;#define TX_BUFFER_SIZE 8
;char tx_buffer[TX_BUFFER_SIZE];
;
;#if TX_BUFFER_SIZE<256
;unsigned char tx_wr_index,tx_rd_index,tx_counter;
;#else
;unsigned int tx_wr_index,tx_rd_index,tx_counter;
;#endif
;
;// USART Transmitter interrupt service routine
;interrupt [USART_TXC] void usart_tx_isr(void)
; 0000 0066 {
;PCODE: $0000004B VOL: 0
;PCODE: $0000004C VOL: 0
; 0000 0067 if (tx_counter)
;PCODE: $0000004D VOL: 0
;PCODE: $0000004E VOL: 0
; 0000 0068    {
; 0000 0069    --tx_counter;
;PCODE: $0000004F VOL: 0
; 0000 006A    UDR=tx_buffer[tx_rd_index];
;PCODE: $00000050 VOL: 0
;PCODE: $00000051 VOL: 0
;PCODE: $00000052 VOL: 0
;PCODE: $00000053 VOL: 0
;PCODE: $00000054 VOL: 0
; 0000 006B    if (++tx_rd_index == TX_BUFFER_SIZE) tx_rd_index=0;
;PCODE: $00000055 VOL: 0
;PCODE: $00000056 VOL: 0
;PCODE: $00000057 VOL: 0
;PCODE: $00000058 VOL: 0
;PCODE: $00000059 VOL: 0
; 0000 006C    };
;PCODE: $0000005A VOL: 0
;PCODE: $0000005B VOL: 0
; 0000 006D }
;PCODE: $0000005C VOL: 0
;PCODE: $0000005D VOL: 0
;PCODE: $0000005E VOL: 0
;
;#ifndef _DEBUG_TERMINAL_IO_
;// Write a character to the USART Transmitter buffer
;#define _ALTERNATE_PUTCHAR_
;#pragma used+
;void putchar(char c)
; 0000 0074 {
;PCODE: $0000005F VOL: 0
;PCODE: $00000060 VOL: 0
; 0000 0075 while (tx_counter == TX_BUFFER_SIZE);
;	c -> Y+0
;PCODE: $00000061 VOL: 0
;PCODE: $00000062 VOL: 0
;PCODE: $00000063 VOL: 0
;PCODE: $00000064 VOL: 0
;PCODE: $00000065 VOL: 0
;PCODE: $00000066 VOL: 0
; 0000 0076 #asm("cli")
;PCODE: $00000067 VOL: 0
	cli
;PCODE: $00000068 VOL: 0
; 0000 0077 if (tx_counter || ((UCSRA & DATA_REGISTER_EMPTY)==0))
;PCODE: $00000069 VOL: 0
;PCODE: $0000006A VOL: 0
;PCODE: $0000006B VOL: 0
;PCODE: $0000006C VOL: 0
;PCODE: $0000006D VOL: 0
;PCODE: $0000006E VOL: 0
;PCODE: $0000006F VOL: 0
; 0000 0078    {
; 0000 0079    tx_buffer[tx_wr_index]=c;
;PCODE: $00000070 VOL: 0
;PCODE: $00000071 VOL: 0
;PCODE: $00000072 VOL: 0
;PCODE: $00000073 VOL: 0
;PCODE: $00000074 VOL: 0
; 0000 007A    if (++tx_wr_index == TX_BUFFER_SIZE) tx_wr_index=0;
;PCODE: $00000075 VOL: 0
;PCODE: $00000076 VOL: 0
;PCODE: $00000077 VOL: 0
;PCODE: $00000078 VOL: 0
;PCODE: $00000079 VOL: 0
; 0000 007B    ++tx_counter;
;PCODE: $0000007A VOL: 0
;PCODE: $0000007B VOL: 0
; 0000 007C    }
; 0000 007D else
;PCODE: $0000007C VOL: 0
;PCODE: $0000007D VOL: 0
; 0000 007E    UDR=c;
;PCODE: $0000007E VOL: 0
;PCODE: $0000007F VOL: 0
; 0000 007F #asm("sei")
;PCODE: $00000080 VOL: 0
;PCODE: $00000081 VOL: 0
	sei
;PCODE: $00000082 VOL: 0
; 0000 0080 }
;PCODE: $00000083 VOL: 0
;PCODE: $00000084 VOL: 0
;PCODE: $00000085 VOL: 0
;#pragma used-
;#endif
;
;// Standard Input/Output functions
;#include <stdio.h>
;
;// Declare your global variables here
;char znak;
;void main(void)
; 0000 008A {
;PCODE: $00000086 VOL: 0
; 0000 008B // Declare your local variables here
; 0000 008C 
; 0000 008D // Input/Output Ports initialization
; 0000 008E // Port A initialization
; 0000 008F // Func7=In Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In
; 0000 0090 // State7=T State6=T State5=T State4=T State3=T State2=T State1=T State0=T
; 0000 0091 PORTA=0x00;
;PCODE: $00000087 VOL: 0
;PCODE: $00000088 VOL: 0
; 0000 0092 DDRA=0x00;
;PCODE: $00000089 VOL: 0
;PCODE: $0000008A VOL: 0
; 0000 0093 
; 0000 0094 // Port B initialization
; 0000 0095 // Func7=In Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In
; 0000 0096 // State7=T State6=T State5=T State4=T State3=T State2=T State1=T State0=T
; 0000 0097 PORTB=0x00;
;PCODE: $0000008B VOL: 0
;PCODE: $0000008C VOL: 0
; 0000 0098 DDRB=0x00;
;PCODE: $0000008D VOL: 0
;PCODE: $0000008E VOL: 0
; 0000 0099 
; 0000 009A // Port C initialization
; 0000 009B // Func7=In Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In
; 0000 009C // State7=T State6=T State5=T State4=T State3=T State2=T State1=T State0=T
; 0000 009D PORTC=0x00;
;PCODE: $0000008F VOL: 0
;PCODE: $00000090 VOL: 0
; 0000 009E DDRC=0x00;
;PCODE: $00000091 VOL: 0
;PCODE: $00000092 VOL: 0
; 0000 009F 
; 0000 00A0 // Port D initialization
; 0000 00A1 // Func7=In Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In
; 0000 00A2 // State7=T State6=T State5=T State4=T State3=T State2=T State1=T State0=T
; 0000 00A3 PORTD=0x00;
;PCODE: $00000093 VOL: 0
;PCODE: $00000094 VOL: 0
; 0000 00A4 DDRD=0x00;
;PCODE: $00000095 VOL: 0
;PCODE: $00000096 VOL: 0
; 0000 00A5 
; 0000 00A6 // Timer/Counter 0 initialization
; 0000 00A7 // Clock source: System Clock
; 0000 00A8 // Clock value: Timer 0 Stopped
; 0000 00A9 // Mode: Normal top=FFh
; 0000 00AA // OC0 output: Disconnected
; 0000 00AB TCCR0=0x00;
;PCODE: $00000097 VOL: 0
;PCODE: $00000098 VOL: 0
; 0000 00AC TCNT0=0x00;
;PCODE: $00000099 VOL: 0
;PCODE: $0000009A VOL: 0
; 0000 00AD OCR0=0x00;
;PCODE: $0000009B VOL: 0
;PCODE: $0000009C VOL: 0
; 0000 00AE 
; 0000 00AF // Timer/Counter 1 initialization
; 0000 00B0 // Clock source: System Clock
; 0000 00B1 // Clock value: Timer 1 Stopped
; 0000 00B2 // Mode: Normal top=FFFFh
; 0000 00B3 // OC1A output: Discon.
; 0000 00B4 // OC1B output: Discon.
; 0000 00B5 // Noise Canceler: Off
; 0000 00B6 // Input Capture on Falling Edge
; 0000 00B7 // Timer 1 Overflow Interrupt: Off
; 0000 00B8 // Input Capture Interrupt: Off
; 0000 00B9 // Compare A Match Interrupt: Off
; 0000 00BA // Compare B Match Interrupt: Off
; 0000 00BB TCCR1A=0x00;
;PCODE: $0000009D VOL: 0
;PCODE: $0000009E VOL: 0
; 0000 00BC TCCR1B=0x00;
;PCODE: $0000009F VOL: 0
;PCODE: $000000A0 VOL: 0
; 0000 00BD TCNT1H=0x00;
;PCODE: $000000A1 VOL: 0
;PCODE: $000000A2 VOL: 0
; 0000 00BE TCNT1L=0x00;
;PCODE: $000000A3 VOL: 0
;PCODE: $000000A4 VOL: 0
; 0000 00BF ICR1H=0x00;
;PCODE: $000000A5 VOL: 0
;PCODE: $000000A6 VOL: 0
; 0000 00C0 ICR1L=0x00;
;PCODE: $000000A7 VOL: 0
;PCODE: $000000A8 VOL: 0
; 0000 00C1 OCR1AH=0x00;
;PCODE: $000000A9 VOL: 0
;PCODE: $000000AA VOL: 0
; 0000 00C2 OCR1AL=0x00;
;PCODE: $000000AB VOL: 0
;PCODE: $000000AC VOL: 0
; 0000 00C3 OCR1BH=0x00;
;PCODE: $000000AD VOL: 0
;PCODE: $000000AE VOL: 0
; 0000 00C4 OCR1BL=0x00;
;PCODE: $000000AF VOL: 0
;PCODE: $000000B0 VOL: 0
; 0000 00C5 
; 0000 00C6 // Timer/Counter 2 initialization
; 0000 00C7 // Clock source: System Clock
; 0000 00C8 // Clock value: Timer 2 Stopped
; 0000 00C9 // Mode: Normal top=FFh
; 0000 00CA // OC2 output: Disconnected
; 0000 00CB ASSR=0x00;
;PCODE: $000000B1 VOL: 0
;PCODE: $000000B2 VOL: 0
; 0000 00CC TCCR2=0x00;
;PCODE: $000000B3 VOL: 0
;PCODE: $000000B4 VOL: 0
; 0000 00CD TCNT2=0x00;
;PCODE: $000000B5 VOL: 0
;PCODE: $000000B6 VOL: 0
; 0000 00CE OCR2=0x00;
;PCODE: $000000B7 VOL: 0
;PCODE: $000000B8 VOL: 0
; 0000 00CF 
; 0000 00D0 // External Interrupt(s) initialization
; 0000 00D1 // INT0: Off
; 0000 00D2 // INT1: Off
; 0000 00D3 // INT2: Off
; 0000 00D4 MCUCR=0x00;
;PCODE: $000000B9 VOL: 0
;PCODE: $000000BA VOL: 0
; 0000 00D5 MCUCSR=0x00;
;PCODE: $000000BB VOL: 0
;PCODE: $000000BC VOL: 0
; 0000 00D6 
; 0000 00D7 // Timer(s)/Counter(s) Interrupt(s) initialization
; 0000 00D8 TIMSK=0x00;
;PCODE: $000000BD VOL: 0
;PCODE: $000000BE VOL: 0
; 0000 00D9 
; 0000 00DA // USART initialization
; 0000 00DB // Communication Parameters: 8 Data, 1 Stop, No Parity
; 0000 00DC // USART Receiver: On
; 0000 00DD // USART Transmitter: On
; 0000 00DE // USART Mode: Asynchronous
; 0000 00DF // USART Baud Rate: 115200
; 0000 00E0 UCSRA=0x00;
;PCODE: $000000BF VOL: 0
;PCODE: $000000C0 VOL: 0
; 0000 00E1 UCSRB=0xD8;
;PCODE: $000000C1 VOL: 0
;PCODE: $000000C2 VOL: 0
; 0000 00E2 UCSRC=0x86;
;PCODE: $000000C3 VOL: 0
;PCODE: $000000C4 VOL: 0
; 0000 00E3 UBRRH=0x00;
;PCODE: $000000C5 VOL: 0
;PCODE: $000000C6 VOL: 0
; 0000 00E4 UBRRL=0x08;
;PCODE: $000000C7 VOL: 0
;PCODE: $000000C8 VOL: 0
; 0000 00E5 
; 0000 00E6 // Analog Comparator initialization
; 0000 00E7 // Analog Comparator: Off
; 0000 00E8 // Analog Comparator Input Capture by Timer/Counter 1: Off
; 0000 00E9 ACSR=0x80;
;PCODE: $000000C9 VOL: 0
;PCODE: $000000CA VOL: 0
; 0000 00EA SFIOR=0x00;
;PCODE: $000000CB VOL: 0
;PCODE: $000000CC VOL: 0
; 0000 00EB 
; 0000 00EC // Global enable interrupts
; 0000 00ED #asm("sei")
;PCODE: $000000CD VOL: 0
	sei
;PCODE: $000000CE VOL: 0
; 0000 00EE 
; 0000 00EF while (1)
;PCODE: $000000CF VOL: 0
; 0000 00F0       {
; 0000 00F1       putchar('#');
;PCODE: $000000D0 VOL: 0
;PCODE: $000000D1 VOL: 0
;PCODE: $000000D2 VOL: 0
; 0000 00F2       delay_ms(10);
;PCODE: $000000D3 VOL: 0
;PCODE: $000000D4 VOL: 0
;PCODE: $000000D5 VOL: 0
; 0000 00F3       znak=getchar();
;PCODE: $000000D6 VOL: 0
;PCODE: $000000D7 VOL: 0
; 0000 00F4       delay_ms(10);
;PCODE: $000000D8 VOL: 0
;PCODE: $000000D9 VOL: 0
;PCODE: $000000DA VOL: 0
; 0000 00F5 //      znak++;
; 0000 00F6       putchar(znak);
;PCODE: $000000DB VOL: 0
;PCODE: $000000DC VOL: 0
; 0000 00F7       putchar('#');
;PCODE: $000000DD VOL: 0
;PCODE: $000000DE VOL: 0
;PCODE: $000000DF VOL: 0
; 0000 00F8       delay_ms(10);
;PCODE: $000000E0 VOL: 0
;PCODE: $000000E1 VOL: 0
;PCODE: $000000E2 VOL: 0
; 0000 00F9 
; 0000 00FA       // Place your code here
; 0000 00FB 
; 0000 00FC       };
;PCODE: $000000E3 VOL: 0
;PCODE: $000000E4 VOL: 0
; 0000 00FD }
;PCODE: $000000E5 VOL: 0
;PCODE: $000000E6 VOL: 0
;PCODE: $000000E7 VOL: 0
